
import React, { useState, useRef, useEffect } from 'react';
import { Send, FileText, RotateCcw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Session, ChatMessage } from '@/pages/Assistant';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

interface ChatSessionProps {
  session: Session;
  onUpdateSession: (updates: Partial<Session>) => void;
}

const ChatSession: React.FC<ChatSessionProps> = ({ session, onUpdateSession }) => {
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // Auto-resize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = `${Math.min(textareaRef.current.scrollHeight, 120)}px`;
    }
  }, [input]);

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [session.messages]);

  const handleSend = async () => {
    if (!input.trim()) return;

    const userMessage: ChatMessage = {
      role: 'user',
      content: input.trim(),
      timestamp: Date.now()
    };

    const updatedMessages = [...session.messages, userMessage];
    onUpdateSession({ messages: updatedMessages });

    const currentInput = input;
    setInput('');
    setIsLoading(true);

    try {
      // Mock AI response for now - replace with actual API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const aiMessage: ChatMessage = {
        role: 'assistant',
        content: `I understand you're asking about: "${currentInput}"\n\nBased on the repository **${session.repoUrl}**${session.filePath ? ` and file **${session.filePath}**` : ''}, here's what I found:\n\n\`\`\`typescript\n// This is a mock response\n// In a real implementation, this would be generated by your AI backend\n// using the repo context and file-aware RAG system\n\`\`\`\n\nWould you like me to analyze a specific file or function?`,
        timestamp: Date.now()
      };

      onUpdateSession({ 
        messages: [...updatedMessages, aiMessage]
      });

    } catch (error) {
      console.error('Error sending message:', error);
      const errorMessage: ChatMessage = {
        role: 'assistant',
        content: 'Sorry, I encountered an error processing your request. Please try again.',
        timestamp: Date.now()
      };
      onUpdateSession({ 
        messages: [...updatedMessages, errorMessage]
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const highlightMentions = (text: string) => {
    return text.split(/(@[\w\-/\\.]+)/g).map((part, i) =>
      part.startsWith('@') ? (
        <span key={i} className="bg-blue-600/30 text-blue-400 px-1.5 py-0.5 rounded-md font-medium">{part}</span>
      ) : (
        part
      )
    );
  };

  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="border-b border-gray-700 bg-gray-800/50 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-lg font-semibold text-white truncate">
              {session.title}
            </h1>
            <p className="text-sm text-gray-400 truncate">
              {session.repoUrl.replace('https://github.com/', '')}
            </p>
            {session.filePath && (
              <p className="text-xs text-blue-400 mt-1">
                Scoped to: {session.filePath}
              </p>
            )}
          </div>
          <Button
            variant="outline"
            size="sm"
            className="text-gray-400 border-gray-600 hover:bg-gray-700"
          >
            <RotateCcw className="h-4 w-4 mr-1" />
            Re-index
          </Button>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-hidden">
        <ScrollArea className="h-full">
          <div className="px-4 py-6">
            <div className="mx-auto max-w-3xl space-y-6">
              {session.messages.length === 0 ? (
                <div className="text-center py-12">
                  <FileText className="h-12 w-12 text-gray-600 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-300 mb-2">Ready to chat!</h3>
                  <p className="text-gray-500 text-sm mb-4">
                    Ask questions about the code, files, or repository structure.
                  </p>
                  <div className="text-left max-w-md mx-auto space-y-2 text-sm text-gray-600">
                    <p>• <span className="text-blue-400">@filename.ts</span> - Ask about specific files</p>
                    <p>• <span className="text-green-400">"What does this function do?"</span></p>
                    <p>• <span className="text-purple-400">"Show me the API endpoints"</span></p>
                  </div>
                </div>
              ) : (
                session.messages.map((message, index) => (
                  <div 
                    key={index}
                    className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div 
                      className={`max-w-[80%] rounded-2xl ${
                        message.role === 'user' 
                          ? 'bg-blue-600 text-white px-4 py-3' 
                          : 'bg-gray-800/60 text-gray-100 border border-gray-700/30'
                      }`}
                    >
                      {message.role === 'assistant' && (
                        <div className="px-4 py-3 border-b border-gray-700/30 flex items-center">
                          <div className="mr-3 flex h-6 w-6 items-center justify-center rounded-full bg-gradient-to-br from-blue-500 to-purple-600">
                            <span className="text-xs font-semibold">AI</span>
                          </div>
                          <span className="text-sm font-medium">Assistant</span>
                        </div>
                      )}
                      
                      <div className={`${message.role === 'assistant' ? 'px-4 py-4' : ''}`}>
                        {message.role === 'assistant' ? (
                          <div className="prose prose-invert max-w-none prose-headings:text-gray-100 prose-p:text-gray-200 prose-a:text-blue-400 prose-code:text-green-400">
                            <ReactMarkdown remarkPlugins={[remarkGfm]}>
                              {message.content}
                            </ReactMarkdown>
                          </div>
                        ) : (
                          <div className="leading-relaxed">{highlightMentions(message.content)}</div>
                        )}
                      </div>
                    </div>
                  </div>
                ))
              )}
              
              {isLoading && (
                <div className="flex justify-start">
                  <div className="bg-gray-800/60 border border-gray-700/30 rounded-2xl">
                    <div className="px-4 py-3 border-b border-gray-700/30 flex items-center">
                      <div className="mr-3 flex h-6 w-6 items-center justify-center rounded-full bg-gradient-to-br from-blue-500 to-purple-600">
                        <span className="text-xs font-semibold">AI</span>
                      </div>
                      <span className="text-sm font-medium text-gray-200">Assistant</span>
                    </div>
                    <div className="px-4 py-4 flex items-center">
                      <div className="flex space-x-1">
                        <div className="h-2 w-2 animate-bounce rounded-full bg-blue-400 delay-0"></div>
                        <div className="h-2 w-2 animate-bounce rounded-full bg-blue-400 delay-100"></div>
                        <div className="h-2 w-2 animate-bounce rounded-full bg-blue-400 delay-200"></div>
                      </div>
                      <span className="ml-3 text-sm text-gray-400">Thinking...</span>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>
          </div>
        </ScrollArea>
      </div>

      {/* Input Area */}
      <div className="border-t border-gray-700 bg-gray-800/50 p-4">
        <div className="mx-auto max-w-3xl">
          <div className="flex items-end gap-3 rounded-xl bg-gray-700/50 border border-gray-600/50 p-3 focus-within:border-blue-500/50 focus-within:ring-1 focus-within:ring-blue-500/20 transition-all duration-200">
            <Textarea
              ref={textareaRef}
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="Ask about the code... Use @filename to scope your question"
              className="flex-1 min-h-[20px] max-h-[120px] bg-transparent border-0 resize-none text-gray-100 placeholder:text-gray-400 focus-visible:ring-0 focus-visible:ring-offset-0"
              disabled={isLoading}
              rows={1}
            />
            <Button 
              onClick={handleSend} 
              disabled={isLoading || !input.trim()}
              size="sm"
              className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatSession;
